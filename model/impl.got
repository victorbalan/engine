package model

import (
	"encoding/json"
	"net/http"
)

type {{slice}} []{{type}}

// Write takes a key and the corresponding writes it out to w after marshaling to JSON.
func ({{t}} {{type}}) Write(w http.ResponseWriter, key Key) {
	body, err := json.Marshal(map[string]{{type}}{
		key.Encode(): {{t}},
	})

	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Write(body)
}

// Write will write out all Entities to w in JSON format.
func ({{t}} {{slice}}) Write(w http.ResponseWriter, keys []Key) {
	if len(keys) != len({{t}}) {
		http.Error(w, "length mismatch while writing entities", http.StatusInternalServerError)
		return
	}

	tmp := make(map[string]{{type}}, len(keys))
	for i := 0; i < len(keys); i++ {
		tmp[keys[i].String()] = {{t}}[i]
	}

	body, err := json.Marshal(tmp)

	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Write(body)
}
